Below is a comprehensive guide for developing and deploying a containerized Python Flask application that uses Caddy to automatically manage Let’s Encrypt certificates. In this example, both the Flask app and Caddy run within the same container using a process manager (Supervisor). Finally, we’ll describe how to deploy this container to Azure App Service.
1. Develop Your Python Flask Application
a. Create Your Flask App

Create a simple Flask application (for example, in a file named app.py):

from flask import Flask
app = Flask(__name__)

@app.route('/')
def hello():
    return "Hello, world! This is a Flask app behind Caddy."

if __name__ == '__main__':
    # Flask listens on port 5000 so Caddy can reverse proxy to it.
    app.run(host='0.0.0.0', port=5000)

Create a requirements.txt file with at least:

Flask==2.2.2

    Note: Adjust version numbers and add any other dependencies as needed.

2. Configure Caddy to Use Let’s Encrypt

Caddy comes with automatic HTTPS (via Let’s Encrypt) built in. Create a Caddyfile (in a folder you’ll copy into your image, for example at the root or in a dedicated config directory) with the following content:

# Replace "yourcustomdomain.com" with your actual domain.
yourcustomdomain.com {
    reverse_proxy localhost:5000
}

This tells Caddy to:

    Listen on the default HTTPS port.
    Use automatic HTTPS (obtaining a certificate from Let’s Encrypt) for the specified domain.
    Reverse proxy requests to your Flask app running on port 5000.

For local testing, you might use a different configuration (or run Caddy in HTTP-only mode).
3. Containerize the Application with Docker

Because we want to run both Flask and Caddy in one container, we’ll use Supervisor to manage multiple processes.
a. Create a Dockerfile

Below is an example Dockerfile that uses a Debian-based image, installs Python, Caddy, and Supervisor, then sets up your app:

# Use a slim Debian-based image as the base.
FROM debian:bullseye-slim

# Install necessary packages: Python, pip, curl, and Supervisor.
RUN apt-get update && apt-get install -y \
    python3 \
    python3-pip \
    curl \
    supervisor \
 && rm -rf /var/lib/apt/lists/*

# Install Caddy using the official install script.
RUN curl -sfL https://get.caddyserver.com | bash -s personal

# Set the working directory.
WORKDIR /app

# Copy the Python dependencies and install them.
COPY requirements.txt .
RUN pip3 install --no-cache-dir -r requirements.txt

# Copy the Flask app and configuration files.
COPY app.py .
COPY Caddyfile /etc/caddy/Caddyfile
COPY supervisord.conf /etc/supervisor/conf.d/supervisord.conf

# Expose ports for HTTP (80) and HTTPS (443).
EXPOSE 80 443

# Start Supervisor which will run both Caddy and Flask.
CMD ["/usr/bin/supervisord", "-n"]

b. Create the Supervisor Configuration

Create a file named supervisord.conf with the following content:

[supervisord]
nodaemon=true

[program:flaskapp]
command=python3 /app/app.py
directory=/app
autostart=true
autorestart=true
stdout_logfile=/dev/stdout
stderr_logfile=/dev/stderr

[program:caddy]
command=/usr/bin/caddy run --config /etc/caddy/Caddyfile --adapter caddyfile
autostart=true
autorestart=true
stdout_logfile=/dev/stdout
stderr_logfile=/dev/stderr

This configuration tells Supervisor to start the Flask app and Caddy concurrently. Caddy will automatically request and renew Let’s Encrypt certificates for yourcustomdomain.com (as set in your Caddyfile).
c. Build and Test Your Container Locally

Build your Docker image locally:

docker build -t my-flask-caddy-app .

Run the container locally, mapping necessary ports:

docker run -p 80:80 -p 443:443 my-flask-caddy-app

Visit http://yourcustomdomain.com (or use your local testing domain) to verify that:

    Caddy is obtaining an SSL certificate via Let’s Encrypt.
    Caddy is reverse proxying requests to your Flask application.

4. Deploy the Container to Azure App Service

Azure App Service can host containerized applications. The following steps assume you have already set up an Azure subscription.
a. Push Your Image to a Container Registry

You can use Azure Container Registry (ACR) or Docker Hub. For ACR:

    Create an ACR Instance:
    In the Azure Portal, create a new Container Registry resource.

    Log in to ACR from the CLI:

az acr login --name <your_acr_name>

Tag Your Image:

docker tag my-flask-caddy-app <your_acr_name>.azurecr.io/my-flask-caddy-app:latest

Push the Image:

    docker push <your_acr_name>.azurecr.io/my-flask-caddy-app:latest

    Note: Replace <your_acr_name> with the name of your ACR instance.

b. Create an Azure Web App for Containers

    Create a New Web App:
        In the Azure Portal, click Create a resource and select Web App.
        In the creation wizard:
            For Publish, choose Docker Container.
            Select Linux as the operating system.
            Provide a unique name, select your resource group, and choose a region.
            Pick an App Service plan (ensure it supports custom domains and SSL if needed).

    Configure the Container Settings:
        In the Container settings for your Web App, choose Azure Container Registry as the image source.
        Select your ACR instance.
        Specify the image name (e.g., my-flask-caddy-app) and tag (e.g., latest).

    Review and Create:
        Review your settings and create the Web App.

c. Bind Your Custom Domain and Enable HTTPS

Once deployed, if you have a custom domain:

    Add a Custom Domain:
        In your Web App’s settings, go to Custom domains and follow the instructions to map your domain. You’ll need to update your DNS records as required.

    Configure SSL:
        Since Caddy inside your container is handling Let’s Encrypt, it will automatically manage HTTPS for your domain. However, you may need to configure your Web App’s TLS/SSL settings to allow inbound traffic on port 443 if required by your hosting plan.

    Important: Ensure that your custom domain in your Caddyfile matches the domain you assign in Azure. This consistency allows Caddy to properly validate and obtain the certificate from Let’s Encrypt.

5. Summary

    Development:
    You create a simple Flask app and use Caddy’s built-in ACME support (with a proper Caddyfile) to handle HTTPS with Let’s Encrypt.

    Containerization:
    The Dockerfile installs Python, Caddy, and Supervisor, while Supervisor runs both the Flask app (on port 5000) and Caddy (as a reverse proxy with HTTPS).

    Deployment:
    The container image is pushed to a registry (e.g., ACR), and an Azure Web App for Containers is created to run the image. Custom domain configuration ensures that Caddy’s Let’s Encrypt setup can validate and serve HTTPS traffic.

This setup minimizes maintenance overhead—Caddy automatically handles certificate issuance and renewal—and is cost effective for short-term deployments, such as a one‑month project.